openapi: 3.0.0
info:
  title: 'APIs For OrderSpack PHP Test'
  description: 'This is a demonstration of OrderSpack Php test.'
  contact:
    name: Developer
    url: 'https://boosurostephen.com'
    email: boosurostephen@yahoo.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
    description: 'PHP TEST API Server'
paths:
  /api/v1/products:
    get:
      tags:
        - Products
      summary: 'Fetch All Products'
      description: 'Get list of products'
      operationId: getAllProducts
      responses:
        200:
          description: 'successful operation'
          content:
            application/json: []
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
        -
          BearerAuth: []
    post:
      tags:
        - Products
      summary: 'Store a product'
      description: 'Store Product'
      operationId: storeProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  description: 'Product Name'
                  type: string
                  example: 'Demo Iphone 14 Pro Max'
                price:
                  description: 'Demo Product Price'
                  type: string
                  example: '1111.99'
                quantity:
                  description: 'Product Quantity'
                  type: int64
                  example: '30'
                product_variants:
                  description: 'Product Variants'
                  type: string
                  example: 'separate ids by comma eg. 1,2,3 etc'
                image:
                  description: 'Product Image'
                  type: file
              type: object
      responses:
        201:
          description: 'product created successfully'
          content:
            application/json: []
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
        -
          BearerAuth: []
  '/api/v1/products/{id}':
    get:
      tags:
        - Products
      summary: 'Fetch a Product'
      description: 'Fetch a product'
      operationId: getProduct
      parameters:
        -
          name: id
          in: path
          description: 'Product id'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'product retrieved successfully'
          content:
            application/json: []
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
        -
          BearerAuth: []
    put:
      tags:
        - Products
      summary: 'Update a product'
      description: 'Update Product'
      operationId: updateProduct
      parameters:
        -
          name: id
          in: path
          description: 'Product id'
          required: true
          schema:
            type: integer
        -
          name: name
          in: query
          description: 'Product Name'
          schema:
            type: string
          example: 'Demo Iphone 14 Pro Max'
        -
          name: price
          in: query
          description: 'Demo Product Price'
          schema:
            type: string
          example: '1111.99'
        -
          name: quantity
          in: query
          description: 'Product Quantity'
          schema:
            type: string
          example: '30'
        -
          name: product_variants
          in: query
          description: 'Product Variants'
          schema:
            type: string
          example: 'separate ids by comma eg. 1,2,3 etc'
      responses:
        201:
          description: 'product updated successfully'
          content:
            application/json: []
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
        -
          BearerAuth: []
    delete:
      tags:
        - Products
      summary: 'Delete Product'
      description: 'Delete a product'
      operationId: deleteProduct
      parameters:
        -
          name: id
          in: path
          description: 'Product id'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Product deleted successfully'
          content:
            application/json: []
        401:
          description: Unauthorized
        403:
          description: Forbidden
      security:
        -
          BearerAuth: []
  /api/v1/register:
    post:
      tags:
        - Users
      summary: 'Register User'
      operationId: 5c468f9e0f6bb6a0779c4a3f7c0f7100
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: Name
                  type: string
                  example: name
                email:
                  description: Email
                  type: string
                  example: hello@gmail.com
                password:
                  description: Password
                  type: string
                  example: password
                password_confirmation:
                  description: 'Confirm Password'
                  type: string
                  example: password
              type: object
      responses:
        201:
          description: 'user registered successfully'
          content:
            application/json: []
        422:
          description: 'Invalid Credentials'
          content:
            application/json: []
  /api/v1/login:
    post:
      tags:
        - Users
      summary: 'Login User'
      operationId: 04edf01e45db5894b023de5590901cd1
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                email:
                  description: Email
                  type: string
                  example: hello@gmail.com
                password:
                  description: Password
                  type: string
                  example: password
              type: object
      responses:
        201:
          description: 'user logged in successfully'
          content:
            application/json: []
        422:
          description: 'Invalid Credentials'
          content:
            application/json: []
  /api/v1/logout:
    post:
      tags:
        - Users
      summary: 'Logout User'
      operationId: 3cdca69627852194510b0f38617affcc
      responses:
        201:
          description: 'user logged out successfully'
          content:
            application/json: []
        422:
          description: 'Can''t be processed'
          content:
            application/json: []
      security:
        -
          BearerAuth: []
  /api/v1/refresh:
    get:
      tags:
        - Users
      summary: 'Refresh Token'
      operationId: 6fbff97091dcd0c54b18b501690d4307
      responses:
        201:
          description: 'user token refreshed successfully'
          content:
            application/json: []
        422:
          description: 'Can''t be processed'
          content:
            application/json: []
      security:
        -
          BearerAuth: []
  /api/v1/user:
    get:
      tags:
        - Users
      summary: 'Get User Details'
      operationId: 2d932a1a158816dc900199c935c16ed0
      responses:
        200:
          description: 'user detailed retrieved successfully'
          content:
            application/json: []
        422:
          description: 'Can''t be processed'
          content:
            application/json: []
      security:
        -
          BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      description: 'A short description for security scheme'
      name: Authorization
      in: header
      bearerFormat: JWT
      scheme: bearer
